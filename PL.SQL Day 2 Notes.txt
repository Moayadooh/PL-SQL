Categories of data:
-----------------------
1. Structured Data:
    Example:
    Datatypes:

2. Unstructured Data:
    Example:
    Datatypes:

3. Semi-structured Data:
    Example:
    Datatypes:

4. Spatial Data:
    Example:
    Datatypes:




The MERGE statement selects rows from one table to update or insert into another table. 
The decision whether to update or insert into the target table is based on a condition in the ON clause.
Note: MERGE is a deterministic statement. 
That is, you cannot update the same row of the target table multiple times in the same MERGE statement. 
You must have INSERT and UPDATE object privileges on the target table and SELECT privilege on the source table.

Complex Views: A view that is created from more than one table.




SQL> create sequence seq1 start with 100 increment by 1;

Sequence created.

SQL> create table hello3 (sno number primary key, sname varchar(20));

Table created.

SQL> insert into hello3 values(seq1.nextval, 'a');

1 row created.

SQL> insert into hello3 values(seq1.nextval, 'b');

1 row created.

SQL> insert into hello3 values(seq1.nextval, 'c');

1 row created.

SQL> select * from hello3;

       SNO SNAME
---------- --------------------
       100 a
       101 b
       102 c


Primary key vs Unique key:
Both of them contain unique values only, that means, no duplicate data in these columns which are declared as PK Or UNIQUE.
Primary key-one per table
Unique key - many per table
Primary key is NOT NULL by default
Unique key can contain NULL values
Unique keys are not linked to other tables.
Primary key is INDEXED by default.





BEGIN
MERGE INTO copy_emp c
     USING employees e
     ON (e.employee_id = c.empno)
   WHEN MATCHED THEN
     UPDATE SET
       c.first_name     = e.first_name,
       c.last_name      = e.last_name,
       c.email          = e.email,
       . . .
   WHEN NOT MATCHED THEN
     INSERT VALUES(e.employee_id, e.first_name, e.last_name,
          . . .,e.department_id);
END;
/


--example of %ROWTYPE
--%ROWTYPE holds the datatype of the entire row
--%TYPE holds the datatype of a single column.

DECLARE
     v_sno t4.sno%TYPE := &sno;
     v_rec  t4%ROWTYPE;
BEGIN
     select * into v_rec from t4 where sno=v_sno;
     dbms_output.put_line(v_rec.gsm || '-' || v_rec.email || '-'|| v_sno);
END;
/


what is the purpose of indexing?
to speed up searches in the tables.


Creating a PL/SQL Record: Example
********************************
DECLARE
  TYPE t_rec IS RECORD
    (v_sal number(8),
     v_minsal number(8) default 1000,
     v_hire_date employees.hire_date%type,
     v_rec1 employees%rowtype);
  v_myrec t_rec;
BEGIN
  v_myrec.v_sal := v_myrec.v_minsal + 500;
  v_myrec.v_hire_date := sysdate;
  SELECT * INTO v_myrec.v_rec1
      FROM employees WHERE employee_id = 100;
  DBMS_OUTPUT.PUT_LINE(v_myrec.v_rec1.last_name ||' '||
  to_char(v_myrec.v_hire_date) ||' '|| to_char(v_myrec.v_sal));
END;
/

Another %ROWTYPE Attribute Example
***********************************
DECLARE
  v_employee_number number:= 124;
  v_emp_rec   employees%ROWTYPE;
BEGIN
 SELECT * INTO v_emp_rec FROM employees
 WHERE  employee_id = v_employee_number;
 INSERT INTO retired_emps(empno, ename, job, mgr,
                 hiredate, leavedate, sal, comm, deptno)  
   VALUES (v_emp_rec.employee_id, v_emp_rec.last_name, 
           v_emp_rec.job_id, v_emp_rec.manager_id,
           v_emp_rec.hire_date, SYSDATE, 
           v_emp_rec.salary,  v_emp_rec.commission_pct, 
           v_emp_rec.department_id);
END;
/


Inserting a Record by Using %ROWTYPE
************************************
...DECLARE
  v_employee_number number:= 124;
  v_emp_rec retired_emps%ROWTYPE;
BEGIN
 SELECT employee_id, last_name, job_id, manager_id,  hire_date, hire_date, salary, commission_pct, department_id INTO v_emp_rec FROM employees
 WHERE  employee_id = v_employee_number;
 INSERT INTO retired_emps VALUES v_emp_rec;
END;
/

SELECT * FROM retired_emps;

Updating a Row in a Table by Using a Record
******************************************
DECLARE
  v_employee_number number:= 124;
  v_emp_rec  retired_emps%ROWTYPE;
BEGIN
  SELECT * INTO v_emp_rec FROM retired_emps WHERE
  empno = v_employee_number;
  v_emp_rec.leavedate:= CURRENT_DATE;
  UPDATE retired_emps SET ROW = v_emp_rec WHERE
  empno=v_employee_number;
END;
/
SELECT * FROM retired_emps;


Creating an INDEX BY Table
**************************
declare

type tab_no is table of varchar2(100)
index by pls_integer;

v_tab_no tab_no;

begin

v_tab_no(1):=‘John';
v_tab_no(6):=‘Allan';
v_tab_no(4):=‘Roy';

dbms_output.put_line(v_tab_no(1));
dbms_output.put_line(v_tab_no(6));
dbms_output.put_line(v_tab_no(4));
end;
/


Define an associative array to hold an entire row from a table.
**************************************************
DECLARE
TYPE dept_table_type
IS
  TABLE OF departments%ROWTYPE INDEX BY VARCHAR2(20);
  dept_table dept_table_type;
  -- Each element of dept_table is a record
BEGIN
   SELECT * INTO dept_table(1) FROM departments 
   WHERE department_id = 10;
   DBMS_OUTPUT.PUT_LINE(dept_table(1).department_id ||' '||
   dept_table(1).department_name ||' '||           
   dept_table(1).manager_id);
END;
/



INDEX BY Table of Records Option: Example 2
******************************************
DECLARE
   TYPE emp_table_type IS TABLE OF
      employees%ROWTYPE INDEX BY PLS_INTEGER;
   my_emp_table  emp_table_type;
   max_count         NUMBER(3):= 104; 
BEGIN
  FOR i IN 100..max_count
  LOOP
   SELECT * INTO my_emp_table(i) FROM employees
   WHERE employee_id = i;
  END LOOP;
  FOR i IN my_emp_table.FIRST..my_emp_table.LAST 
  LOOP
     DBMS_OUTPUT.PUT_LINE(my_emp_table(i).last_name);
  END LOOP;
END; 
/


Example: Nested Tables
**********************
SET SERVEROUTPUT ON;

DECLARE
   TYPE location_type IS TABLE OF locations.city%TYPE;
    offices location_type;
    table_count NUMBER;
BEGIN
   offices := location_type('Bombay', 'Tokyo','Singapore',
    'Oxford’);
		FOR i in 1.. offices.count() LOOP
     		DBMS_OUTPUT.PUT_LINE(offices(i));
   	END LOOP;
END;
/










